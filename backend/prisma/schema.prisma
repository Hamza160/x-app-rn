generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  clerkId        String? @unique
  email          String  @unique
  firstName      String
  lastName       String
  username       String  @unique
  profilePicture String?
  bio            String?
  location       String?

  posts    Post[]
  likes    Like[]
  comments Comment[]

  followers Follow[] @relation("followers")
  following Follow[] @relation("following")

  sentNotifications     Notification[] @relation("sentNotifications")
  receivedNotifications Notification[] @relation("receivedNotifications")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Follow {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  follower    User     @relation("following", fields: [followerId], references: [id])
  followerId  String   @db.ObjectId
  following   User     @relation("followers", fields: [followingId], references: [id])
  followingId String   @db.ObjectId
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Post {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  user          User           @relation(fields: [userId], references: [id])
  userId        String         @db.ObjectId
  content       String
  image         String?
  likes         Like[]
  comments      Comment[]
  notifications Notification[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, createdAt])
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id])
  postId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  Comment   Comment? @relation(fields: [commentId], references: [id])
  commentId String?  @db.ObjectId

  @@unique([postId, userId])
  @@index([userId])
  @@index([postId])
}

model Comment {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  post          Post           @relation(fields: [postId], references: [id])
  postId        String         @db.ObjectId
  user          User           @relation(fields: [userId], references: [id])
  userId        String         @db.ObjectId
  content       String
  notifications Notification[]
  likes         Like[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([postId, createdAt])
}

enum NotificationType {
  FOLLOW
  LIKE
  COMMENT
}

model Notification {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  fromUser User   @relation("sentNotifications", fields: [fromId], references: [id])
  fromId   String @db.ObjectId

  toUser User   @relation("receivedNotifications", fields: [toId], references: [id])
  toId   String @db.ObjectId

  type NotificationType

  post   Post?   @relation(fields: [postId], references: [id])
  postId String? @db.ObjectId

  comment   Comment? @relation(fields: [commentId], references: [id])
  commentId String?  @db.ObjectId

  createdAt DateTime @default(now())

  @@index([toId, createdAt])
  @@index([fromId, createdAt])
}
